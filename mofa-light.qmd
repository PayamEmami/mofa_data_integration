---
title: "Multi-Omics Factor Analysis (MOFA)"
author: "Payam Emami"
format:
  html:
    code-link: false
    toc: true
    toc-depth: 4
    toc-expand: 3
    editor: visual
title-block-banner: true
subtitle: Light Version
editor_options: 
  chunk_output_type: console
---

Setting up environment

You will need to install a few packages to fully run this notebook. The main packages needed are `MOFA2` and `ggplot2`.
```{r, eval=FALSE}
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("MOFA2")

# list of packages to be installed
packages <- c("ggplot2")

# check and install missing packages
new_packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages, dependencies = TRUE, type = "binary")

```

# Introduction

In classical data integration, we would like to use information across different modalities (e.g. transcriptome, proteome and metabolome) to gain more comprehensive insights into the biological systems under study. This type of data can be used for an array of different purposes including but not limited to molecular classification, stratification of patients, outcome predictions and understanding of regulatory processes such as gene regulation and pathway analysis.

Here we are going to focus on unsupervised modeling and segmentation, which are promising because each type of omics data may contribute valuable information to the overall understanding of complex biological systems. By leveraging unsupervised modeling, we can uncover hidden patterns and relationships within the data without relying on predefined labels. This is especially beneficial when dealing with omics data, where the volume and complexity can be overwhelming. Furthermore, segmentation allows us to group similar data points, making it easier to identify and analyze specific subsets of the data. Given the heterogeneous nature of omics data, integrating multiple types can provide a more comprehensive view of the underlying biological processes.

In this lab we are going to learn how to use Multi-Omics Factor Analysis (MOFA) for multiple data views to uncover hidden but common pattern within the data.

# Data

We will use TCGA data set from `mixOmics`, where features are in the columns and samples in the rows.

> *This data set is a small subset of the full data set from The Cancer Genome Atlas. It contains the expression or abundance of three matching omics data sets: mRNA, miRNA and proteomics for 150 breast cancer samples (with three molecular subtypes of breast cancer: Basal, Her2, Luminal A) in the training set, and 70 samples in the test set. The test set is missing the proteomics data set.*

```{r, message=FALSE}
# download the dataset
download.file("https://github.com/mixOmicsTeam/mixOmics/raw/master/data/breast.TCGA.rda", destfile = "TCGA.rda")

# load the data
load("TCGA.rda")
```

This data, when loaded, has already been split into a list with two elements: training and testing. The first element (training) contains four elements, again lists, containing miRNA, mRNA, proteomics and cancer molecular subtypes. The second element (testing) contains three lists holding miRNA, mRNA and molecular subtypes data (proteomics data are missing here).

```{r}
# preview data
str(breast.TCGA)
```


# Data integration using MOFA2

MOFA is a factor analysis model that provides a general framework for the integration of multi-omic data sets in an unsupervised fashion. Intuitively, MOFA can be viewed as a versatile and statistically rigorous generalization of principal component analysis to multi-omics data. Given several data matrices with measurements of multiple -omics data types on the same or on overlapping sets of samples, MOFA infers an interpretable low-dimensional representation in terms of a few latent factors. These learnt factors represent the driving sources of variation across data modalities, thus facilitating the identification of cellular states or disease subgroups.

Let's use our omics data, mRNA, miRNA and proteome to create a low-dimensional representation based on the variation across the three modalities. To do that, we will need to build and train MOFA object. After that, in downstream analysis we can use the MOFA model to visualize and interpret the model output, e.g. to learn how much variance is explained by the individual omics for the new latent factors or find out which features relate most (have strongest features weights) to the latent factors.

## Building a MOFA object

To create a MOFA object you need to specify three dimensions: samples, features and view(s). Views(s) are the different omics types in our case. MOFA object can be created based on many different data formats such as a list of matrices, a long data.frame, MultiAssayExperiment or even Suerat objects for single-cell genomics data. Here, we will use a list of matrices as our TCGA data is already in this format. 


```{r}
#| collapse: true

# load library
library(MOFA2)

# remove the subtype information from training data
data_mofa <- breast.TCGA$data.train[-4]

# transpose data because MOFA wants features in rows
data_mofa <- lapply(data_mofa, t)

# create MOFA object
MOFAobject <- create_mofa(data_mofa)
```

We can have a look at the structure of the input data:
```{r}
#| fig-align: center
plot_data_overview(MOFAobject)
```

This shows us how many samples we have and how many features per data view is there. If there were missing values, these would be shown as gray lines.

::: {#exr-na}
### NA

Can you add a bit of missing values and check how the plot will change?
:::

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: true
#| fig-align: center

# Let's randomly introduce NAs to 20% of samples in one omics e.g. protein data
# This is an example code. You can probably find an easier way to solve this :) 

# make a copy of MOFA data and protein data
data_mofa_with_na <- data_mofa
data_protein <- data_mofa$protein

# calculate number of data points to replace
n <- ncol(data_protein) # no. of samples
n_to_replace <- 20/100 * n # number to replace, 20%

# sample index and replace with NA 
data_protein[, sample(1:n, n_to_replace)] <- NA

# check that we have NAs, we should have n_to_replace amount
# sum(is.na(data_protein))

# replace protein data under the MOFA
data_mofa_with_na$protein <- data_protein

# create MOFA object
MOFAobject_with_na <- create_mofa(data_mofa_with_na)

# plot
plot_data_overview(MOFAobject_with_na)
```

## Defining data and model options

Before we start modeling, we can specify some data and model options. 

For **data options**, we have:

- scale_groups: if groups have different ranges/variances, it is good practice to scale each group to unit variance. Default is FALSE
- scale_views: if views have different ranges/variances, it is good practice to scale each view to unit variance. Default is FALSE

and we can confirm that we are using default options by: 
```{r}
data_opts <- get_default_data_options(MOFAobject)
head(data_opts)
```

For **model options**, we have: 

- num_factors: number of factors
- likelihoods: likelihood per view (options are “gaussian”, “poisson”, “bernoulli”). Default is “gaussian”.
- spikeslab_factors: use spike-slab sparsity prior in the factors? Default is FALSE.
- spikeslab_weights: use spike-slab sparsity prior in the weights? Default is TRUE.
- ard_factors: use ARD prior in the factors? Default is TRUE if using multiple groups.
- ard_weights: use ARD prior in the weights? Default is TRUE if using multiple views.

We can control the number of factors and we should adjust the likelihoods to match our data. Unless we want to learn more about the underlying mathematical models, we keep other parameters, such as spikeslab and ARD priors set to default. 

Let's check our omics data distributions to make sure we use correct likelihood values. 
```{r}
#| fig-align: center
#| fig-height: 7
par(mfrow=c(2,2))
hist(data_mofa$mrna)
hist(data_mofa$protein)
hist(data_mofa$mirna)
```

All of our data is seems to be normally distributed so we use normal distribution. In practice MOFA allows us to select 'gaussian' for continuous data (e.g proteomics), 'bernoulli' for binary data (e.g. methylation) and 'poisson' for count data (e.g. RNA-Seq).

We can now set the model parameters. We can preview the default parameters already set:
```{r}
model_opts <- get_default_model_options(MOFAobject)
print(model_opts)
```

where we see that MOFA selected default (gaussian) likelihood for all our data and includes 15 factors (latent variables). 

To change model parameters, e.g. reduce number of factors from default 15 to 10 to make the computations run faster we type: 
```{r}
model_opts$num_factors <- 10
```

## Training a MOFA object

Our MOFA object is now set and we can start the training. Similar to model options, there are parameters that define training options. Briefly, these are: 

- maxiter: number of iterations
- convergence_mode
- gpu_mode
- verbose mode

We can again see the default values: 
```{r}
train_opts <- get_default_training_options(MOFAobject)
head(train_opts)
```

and notice that for instance that the default number of iterations is set to 1000 and the convergence mode is set to "fast". Similar to model options, these parameters refer to the underlying method. "Fast" convergence mode tends to be good for exploration, but it may be worth considering changing it to "medium" or "slow" for the final model. GPU mode refers to running MOFA on GPU, something that needs cupy installed and a functional GPU. 

To train a MOFA object: 
```{r}
MOFAobject <- prepare_mofa(MOFAobject,
                           model_options = model_opts # input model options
)
MOFAobject <- invisible(run_mofa(MOFAobject))
```

Note that we get a message that a model was automatically save to .hdf5. It is also possible to specify the name and location of the file to save the model to, via `outfile` option under `runMofa()` function.

## Variance decomposition

The most important insight that MOFA generates is the **variance decomposition analysis**. This plot shows the percentage of variance explained by each factor across each data modality.

```{r}
#| fig-align: center
plot_variance_explained(MOFAobject)
```

From the results of the `plot_variance_explained` function in MOFA, we can discern the variance explained by each factor across the three views: mirna, mrna, and protein.

In the **mirna** view, Factor1 leads by explaining approximately 15.96% of the variance. Notably, Factor1 also stands out in both the **mrna** and **protein** views, explaining 20.37% and 20.41% respectively, suggesting its consistent importance across all views.

For the **mrna** view, besides Factor1, Factor2 contributes significantly with 11.88%. This contrasts with its contribution in the protein view, where it explains only 1.25% of the variance, and in the mirna view, where it accounts for 6.04%.

In the **protein** view, while Factor1 remains dominant, Factor3 emerges as significant, explaining 12.20% of the variance. This is intriguing as Factor3 has a minimal role in the mrna view (0.12%) but does have a presence in the mirna view with 0.65%.

Factors such as Factor4 and Factor7 exhibit diverse roles across the views. In the mirna view, Factor4 explains a notable 12.77% but diminishes to 0.16% and 0.02% in the mrna and protein views respectively. Factor7, on the other hand, is more prominent in the mirna view with 7.09% but is almost negligible in the other two views.

Btw. the variance explained estimates, corresponding to the above plot, are stored in the hdf5 file and loaded in model@cache[["variance_explained"]]. They can be viewed via: 
```{r}
# variance explained for every factor 
print(MOFAobject@cache$variance_explained$r2_per_factor)
```

**Which factor consistently plays a vital role across all the views?**

It is also important to see if the model fits the data well. We can do this by looking at how much of total variance is explained by factors across different views. Here, the results will usually vary based on the kind of data, number of samples and number of factors used.

```{r}
var_plot <- plot_variance_explained(MOFAobject, plot_total = T)[[2]]
var_plot
```

In this data set, by using 10 factors the MOFA model explains about `r round(var_plot$data$R2[var_plot$data$view=="mirna"])`% of the variation in the miRNA, `r round(var_plot$data$R2[var_plot$data$view=="mrna"])`% of the variation in the mRNA data and `r round(var_plot$data$R2[var_plot$data$view=="protein"])`% of the variation in the protein data.

The matching variance values can be extracted via: 
```{r}
print(MOFAobject@cache$variance_explained$r2_total)
```

## Downstream analysis

We now we have a reasonable model in which Factor1 consistently plays a vital role across all views. In the downstream analysis we can explore more factors, such as Factor1, and features weights. We can for instance aim to characterize Factor1 molecular signal and its association with available sample covariates.

## Adding annotations

We can add samples annotations to the model now. We will add only our cancer subtypes, but could also include other covariates that my be relevant to the study, such as age or gender.
```{r}
# add cancer subtype to the model
samples_metadata(MOFAobject) <- data.frame(sample=colnames(data_mofa$mirna),
                                           subtype=breast.TCGA$data.train$subtype)
```

### Visualizing factors

We can visualize individual factor or factors combinations. We can also do that in connection to the sample groups. Let's look at few examples:

```{r}
#| fig-align: center
#| fig-cap: "Visualizaiton of individual Factors 1, 2 and 3, with cancer subtype grouping information."

# visualize Factors 1, 2, 3
model <- MOFAobject
plot_factor(model, 
  factor = 1:3,
  color_by = "subtype"
)

```


```{r}
#| fig-align: center
#| fig-cap: "Visualizaiton of individual Factors 1, 2 and 3, with cancer subtype grouping information and with added violin plot."

# add violin plot
model <- MOFAobject
plot_factor(model, 
  factor = 1:3,
  color_by = "subtype", 
  add_violin = T, 
  dodge = T
  
)

```


```{r}
#| fig-align: center
#| fig-cap: "Visualizaiton of combinations of Factors 1 and 2, with cancer subtype grouping information."

# visualize combination of Factors 1 and 2
model <- MOFAobject
plot_factors(model, 
  factors = 1:2,
  color_by = "subtype"
)

```

### Association analysis

To understand the relation between Factors and sample metadata, we can further perform an association analysis.

```{r}
#| fig-align: center

# correlate factors with covariates
correlate_factors_with_covariates(MOFAobject, 
  covariates = c("subtype"), 
  plot = "log_pval",cluster_cols=F
)

```

The results clearly shows a strong association of Factor1 and cancer subtype. The remaining factors do not show a clear association with the cancer subtype. We could have also started from the association analysis to find out the factor that is associated with our grouping or other covariate of interest, and the focus on plotting the factors of interest.

### Visualizing weights

We have a strong trend of subtypes captured by Factor 1. We can now look at the weights for this factor to figure out what are the most important features that contribute to this pattern.

Feature weights play an important role in understanding the influence of each feature on a given factor. These weights offer a quantifiable score for every feature in relation to its respective factor. Essentially, when a feature doesn't correlate with a factor, its weight is anticipated to hover around zero. Conversely, features that are robustly associated with the factor will display large absolute weight values. The polarity of the weight whether positive or negative reveals the nature of the relationship: a positive weight suggests that the feature level elevates in instances with positive factor values and the opposite for negative weights.

Let's look at the top 10 features in mRNA.
```{r}
#| fig-align: center

plot_top_weights(MOFAobject,view = "mrna",
 factor = 1,
 nfeatures = 10,    
 scale = T          
)
```

The plot suggest that `STC2` has a strong *negative* relationship with Factor1. Looking back at the score plot, we see that our `Basal` subtype has ended up on the right of the plot, `Her2` in the middle and `LumA` on the left. This suggest that the expression of `STC2` is higher in `LumA` vs `Her2` and also `Her2` vs `LumA`. Let's check it:

```{r}
#| fig-align: center

plot_data_scatter(MOFAobject, 
  view = "mrna",
  factor = 1, features = "STC2",color_by = "subtype"
)
```

Great. But we have so many other features, do we have a subgroup of features in our data:

```{r}
#| fig-align: center
#| fig-height: 8

# plot heatmap
sample_group <- samples_metadata(MOFAobject)
rownames(sample_group) <- sample_group[,1]

heatmap_plot <- plot_data_heatmap(MOFAobject, 
view = "mrna",
  factor = 1, features = 50,
  cluster_rows = TRUE, cluster_cols = FALSE,annotation_samples = sample_group[,"subtype",drop=F],
  show_rownames = TRUE, show_colnames = FALSE,
  scale = "row"
)
heatmap_plot
```

We can at least see two big groups of mRNAs having contrasting expression pattern. Let's extract these features and investigate them further.

```{r}
#| fig-align: center
#| fig-width: 14
#| fig-height: 14
#| fig-cap: "Scatter plot of features (mRNAs) in the first group of expression pattern agaist Factor 1 values"

# cut into features in two groups
feature_subgroups <- cutree(heatmap_plot$tree_row, 2)

# plot first group of extracted features
plot_data_scatter(MOFAobject, 
  view = "mrna",
  factor = 1,  
  features = names(feature_subgroups[feature_subgroups==1]),
  color_by = "subtype",
  dot_size = 1.5
) 


```

```{r}
#| fig-align: center
#| fig-width: 14
#| fig-height: 14
#| fig-cap: "Scatter plot of features (mRNAs) in the second group of expression pattern agaist Factor 1 values"

# plot second group of extracted features
plot_data_scatter(MOFAobject, 
  view = "mrna",
  factor = 1,  
  features = names(feature_subgroups[feature_subgroups==2]),
  color_by = "subtype", 
  dot_size = 1.5
) 
```


As it is clear the two subgroups are related to the features that are positively and negatively correlated with the first factor. This is a good indication that we can use the weights to group the features. We could use these groups to do enrichment analysis or similar, but this would be outside MOFA package. 

::: {#exr-mofa}
### MOFA

Can you perform MOFA on the test data which is in `breast.TCGA$data.test`?

1.  Do you see the same pattern as in the training set?
2.  Do the top 10 most important features overlap between training and testing?
3.  How about the grouping of the features?
:::

