{
  "hash": "e3237a35a631316b0258a1dd1888468a",
  "result": {
    "markdown": "---\ntitle: \"Multi-Omics Factor Analysis (MOFA)\"\nauthor: \"Payam Emami\"\nformat:\n  html:\n    code-link: false\n    toc: true\n    toc-depth: 4\n    toc-expand: 3\n    editor: visual\ntitle-block-banner: true\nsubtitle: Light Version\neditor_options: \n  chunk_output_type: console\n---\n\n\nSetting up environment\n\nYou will need to install a few packages to fully run this notebook. The main packages needed are `MOFA2` and `ggplot2`.\n\n::: {.cell hash='mofa-light_cache/html/unnamed-chunk-1_dbf1d7eb93b420a9a6d995d9dd47f887'}\n\n```{.r .cell-code}\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\nBiocManager::install(\"MOFA2\")\n\n# list of packages to be installed\npackages <- c(\"ggplot2\")\n\n# check and install missing packages\nnew_packages <- packages[!(packages %in% installed.packages()[,\"Package\"])]\nif(length(new_packages)) install.packages(new_packages, dependencies = TRUE, type = \"binary\")\n```\n:::\n\n\n# Introduction\n\nIn classical data integration, we would like to use information across different modalities (e.g. transcriptome, proteome and metabolome) to gain more comprehensive insights into the biological systems under study. This type of data can be used for an array of different purposes including but not limited to molecular classification, stratification of patients, outcome predictions and understanding of regulatory processes such as gene regulation and pathway analysis.\n\nHere we are going to focus on unsupervised modeling and segmentation, which are promising because each type of omics data may contribute valuable information to the overall understanding of complex biological systems. By leveraging unsupervised modeling, we can uncover hidden patterns and relationships within the data without relying on predefined labels. This is especially beneficial when dealing with omics data, where the volume and complexity can be overwhelming. Furthermore, segmentation allows us to group similar data points, making it easier to identify and analyze specific subsets of the data. Given the heterogeneous nature of omics data, integrating multiple types can provide a more comprehensive view of the underlying biological processes.\n\nIn this lab we are going to learn how to use Multi-Omics Factor Analysis (MOFA) for multiple data views to uncover hidden but common pattern within the data.\n\n# Data\n\nWe will use TCGA data set from `mixOmics`, where features are in the columns and samples in the rows.\n\n> *This data set is a small subset of the full data set from The Cancer Genome Atlas. It contains the expression or abundance of three matching omics data sets: mRNA, miRNA and proteomics for 150 breast cancer samples (with three molecular subtypes of breast cancer: Basal, Her2, Luminal A) in the training set, and 70 samples in the test set. The test set is missing the proteomics data set.*\n\n\n::: {.cell hash='mofa-light_cache/html/unnamed-chunk-2_4c020f0ab935b1064e3057d0566ab02b'}\n\n```{.r .cell-code}\n# download the dataset\ndownload.file(\"https://github.com/mixOmicsTeam/mixOmics/raw/master/data/breast.TCGA.rda\", destfile = \"TCGA.rda\")\n\n# load the data\nload(\"TCGA.rda\")\n```\n:::\n\n\nThis data, when loaded, has already been split into a list with two elements: training and testing. The first element (training) contains four elements, again lists, containing miRNA, mRNA, proteomics and cancer molecular subtypes. The second element (testing) contains three lists holding miRNA, mRNA and molecular subtypes data (proteomics data are missing here).\n\n\n::: {.cell hash='mofa-light_cache/html/unnamed-chunk-3_675c7ddcdd80d90d33d41cf28682d01f'}\n\n```{.r .cell-code}\n# preview data\nstr(breast.TCGA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 2\n $ data.train:List of 4\n  ..$ mirna  : num [1:150, 1:184] 11.8 12.9 12.3 12 13.4 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. ..$ : chr [1:150] \"A0FJ\" \"A13E\" \"A0G0\" \"A0SX\" ...\n  .. .. ..$ : chr [1:184] \"hsa-let-7a-1\" \"hsa-let-7a-2\" \"hsa-let-7a-3\" \"hsa-let-7b\" ...\n  ..$ mrna   : num [1:150, 1:200] 4.36 1.98 1.73 4.36 2.45 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. ..$ : chr [1:150] \"A0FJ\" \"A13E\" \"A0G0\" \"A0SX\" ...\n  .. .. ..$ : chr [1:200] \"RTN2\" \"NDRG2\" \"CCDC113\" \"FAM63A\" ...\n  ..$ protein: num [1:150, 1:142] 0.0491 -0.08 -0.0328 -0.2053 0.0602 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. ..$ : chr [1:150] \"A0FJ\" \"A13E\" \"A0G0\" \"A0SX\" ...\n  .. .. ..$ : chr [1:142] \"14-3-3_epsilon\" \"4E-BP1\" \"4E-BP1_pS65\" \"4E-BP1_pT37\" ...\n  ..$ subtype: Factor w/ 3 levels \"Basal\",\"Her2\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ data.test :List of 3\n  ..$ mirna  : num [1:70, 1:184] 12.8 13.9 12.9 12.4 13.1 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. ..$ : chr [1:70] \"A54N\" \"A2NL\" \"A6VY\" \"A3XT\" ...\n  .. .. ..$ : chr [1:184] \"hsa-let-7a-1\" \"hsa-let-7a-2\" \"hsa-let-7a-3\" \"hsa-let-7b\" ...\n  ..$ mrna   : num [1:70, 1:200] 1.19 2.73 3.05 2.7 3.14 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. ..$ : chr [1:70] \"A54N\" \"A2NL\" \"A6VY\" \"A3XT\" ...\n  .. .. ..$ : chr [1:200] \"RTN2\" \"NDRG2\" \"CCDC113\" \"FAM63A\" ...\n  ..$ subtype: Factor w/ 3 levels \"Basal\",\"Her2\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n:::\n:::\n\n\n\n# Data integration using MOFA2\n\nMOFA is a factor analysis model that provides a general framework for the integration of multi-omic data sets in an unsupervised fashion. Intuitively, MOFA can be viewed as a versatile and statistically rigorous generalization of principal component analysis to multi-omics data. Given several data matrices with measurements of multiple -omics data types on the same or on overlapping sets of samples, MOFA infers an interpretable low-dimensional representation in terms of a few latent factors. These learnt factors represent the driving sources of variation across data modalities, thus facilitating the identification of cellular states or disease subgroups.\n\nLet's use our omics data, mRNA, miRNA and proteome to create a low-dimensional representation based on the variation across the three modalities. To do that, we will need to build and train MOFA object. After that, in downstream analysis we can use the MOFA model to visualize and interpret the model output, e.g. to learn how much variance is explained by the individual omics for the new latent factors or find out which features relate most (have strongest features weights) to the latent factors.\n\n## Building a MOFA object\n\nTo create a MOFA object you need to specify three dimensions: samples, features and view(s). Views(s) are the different omics types in our case. MOFA object can be created based on many different data formats such as a list of matrices, a long data.frame, MultiAssayExperiment or even Suerat objects for single-cell genomics data. Here, we will use a list of matrices as our TCGA data is already in this format. \n\n\n\n::: {.cell hash='mofa-light_cache/html/unnamed-chunk-4_6de4e31aae80a70e7abe82b6781b2849'}\n\n```{.r .cell-code}\n# load library\nlibrary(MOFA2)\n\n# remove the subtype information from training data\ndata_mofa <- breast.TCGA$data.train[-4]\n\n# transpose data because MOFA wants features in rows\ndata_mofa <- lapply(data_mofa, t)\n\n# create MOFA object\nMOFAobject <- create_mofa(data_mofa)\n## Creating MOFA object from a list of matrices (features as rows, sample as columns)...\n```\n:::\n\n\nWe can have a look at the structure of the input data:\n\n::: {.cell layout-align=\"center\" hash='mofa-light_cache/html/unnamed-chunk-5_155b204b9a966e82972e50dcc3c75c8c'}\n\n```{.r .cell-code}\nplot_data_overview(MOFAobject)\n```\n\n::: {.cell-output-display}\n![](mofa-light_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nThis shows us how many samples we have and how many features per data view is there. If there were missing values, these would be shown as gray lines.\n\n::: {#exr-na}\n### NA\n\nCan you add a bit of missing values and check how the plot will change?\n:::\n\n\n::: {.cell layout-align=\"center\" hash='mofa-light_cache/html/unnamed-chunk-6_e6b9f33088ea359f74b0e463a73e075a'}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# Let's randomly introduce NAs to 20% of samples in one omics e.g. protein data\n# This is an example code. You can probably find an easier way to solve this :) \n\n# make a copy of MOFA data and protein data\ndata_mofa_with_na <- data_mofa\ndata_protein <- data_mofa$protein\n\n# calculate number of data points to replace\nn <- ncol(data_protein) # no. of samples\nn_to_replace <- 20/100 * n # number to replace, 20%\n\n# sample index and replace with NA \ndata_protein[, sample(1:n, n_to_replace)] <- NA\n\n# check that we have NAs, we should have n_to_replace amount\n# sum(is.na(data_protein))\n\n# replace protein data under the MOFA\ndata_mofa_with_na$protein <- data_protein\n\n# create MOFA object\nMOFAobject_with_na <- create_mofa(data_mofa_with_na)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCreating MOFA object from a list of matrices (features as rows, sample as columns)...\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n# plot\nplot_data_overview(MOFAobject_with_na)\n```\n\n::: {.cell-output-display}\n![](mofa-light_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Defining data and model options\n\nBefore we start modeling, we can specify some data and model options. \n\nFor **data options**, we have:\n\n- scale_groups: if groups have different ranges/variances, it is good practice to scale each group to unit variance. Default is FALSE\n- scale_views: if views have different ranges/variances, it is good practice to scale each view to unit variance. Default is FALSE\n\nand we can confirm that we are using default options by: \n\n::: {.cell hash='mofa-light_cache/html/unnamed-chunk-7_4ca0eccb5d648aea5a21aa7440ae6179'}\n\n```{.r .cell-code}\ndata_opts <- get_default_data_options(MOFAobject)\nhead(data_opts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$scale_views\n[1] FALSE\n\n$scale_groups\n[1] FALSE\n\n$center_groups\n[1] TRUE\n\n$use_float32\n[1] TRUE\n\n$views\n[1] \"mirna\"   \"mrna\"    \"protein\"\n\n$groups\n[1] \"group1\"\n```\n:::\n:::\n\n\nFor **model options**, we have: \n\n- num_factors: number of factors\n- likelihoods: likelihood per view (options are “gaussian”, “poisson”, “bernoulli”). Default is “gaussian”.\n- spikeslab_factors: use spike-slab sparsity prior in the factors? Default is FALSE.\n- spikeslab_weights: use spike-slab sparsity prior in the weights? Default is TRUE.\n- ard_factors: use ARD prior in the factors? Default is TRUE if using multiple groups.\n- ard_weights: use ARD prior in the weights? Default is TRUE if using multiple views.\n\nWe can control the number of factors and we should adjust the likelihoods to match our data. Unless we want to learn more about the underlying mathematical models, we keep other parameters, such as spikeslab and ARD priors set to default. \n\nLet's check our omics data distributions to make sure we use correct likelihood values. \n\n::: {.cell layout-align=\"center\" hash='mofa-light_cache/html/unnamed-chunk-8_8ae1bf989b7fa601b4d6f71a9d9e536b'}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nhist(data_mofa$mrna)\nhist(data_mofa$protein)\nhist(data_mofa$mirna)\n```\n\n::: {.cell-output-display}\n![](mofa-light_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nAll of our data is seems to be normally distributed so we use normal distribution. In practice MOFA allows us to select 'gaussian' for continuous data (e.g proteomics), 'bernoulli' for binary data (e.g. methylation) and 'poisson' for count data (e.g. RNA-Seq).\n\nWe can now set the model parameters. We can preview the default parameters already set:\n\n::: {.cell hash='mofa-light_cache/html/unnamed-chunk-9_950378f5f64ef88c03fd6266a6e4a509'}\n\n```{.r .cell-code}\nmodel_opts <- get_default_model_options(MOFAobject)\nprint(model_opts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$likelihoods\n     mirna       mrna    protein \n\"gaussian\" \"gaussian\" \"gaussian\" \n\n$num_factors\n[1] 15\n\n$spikeslab_factors\n[1] FALSE\n\n$spikeslab_weights\n[1] FALSE\n\n$ard_factors\n[1] FALSE\n\n$ard_weights\n[1] TRUE\n```\n:::\n:::\n\n\nwhere we see that MOFA selected default (gaussian) likelihood for all our data and includes 15 factors (latent variables). \n\nTo change model parameters, e.g. reduce number of factors from default 15 to 10 to make the computations run faster we type: \n\n::: {.cell hash='mofa-light_cache/html/unnamed-chunk-10_3400789a95b7eb617ed28ab7e156e1ca'}\n\n```{.r .cell-code}\nmodel_opts$num_factors <- 10\n```\n:::\n\n\n## Training a MOFA object\n\nOur MOFA object is now set and we can start the training. Similar to model options, there are parameters that define training options. Briefly, these are: \n\n- maxiter: number of iterations\n- convergence_mode\n- gpu_mode\n- verbose mode\n\nWe can again see the default values: \n\n::: {.cell hash='mofa-light_cache/html/unnamed-chunk-11_a73364049f35575ee6f0ed1675fdc146'}\n\n```{.r .cell-code}\ntrain_opts <- get_default_training_options(MOFAobject)\nhead(train_opts)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$maxiter\n[1] 1000\n\n$convergence_mode\n[1] \"fast\"\n\n$drop_factor_threshold\n[1] -1\n\n$verbose\n[1] FALSE\n\n$startELBO\n[1] 1\n\n$freqELBO\n[1] 5\n```\n:::\n:::\n\n\nand notice that for instance that the default number of iterations is set to 1000 and the convergence mode is set to \"fast\". Similar to model options, these parameters refer to the underlying method. \"Fast\" convergence mode tends to be good for exploration, but it may be worth considering changing it to \"medium\" or \"slow\" for the final model. GPU mode refers to running MOFA on GPU, something that needs cupy installed and a functional GPU. \n\nTo train a MOFA object: \n\n::: {.cell hash='mofa-light_cache/html/unnamed-chunk-12_5c838f339711455c6a6eccc8be15a914'}\n\n```{.r .cell-code}\nMOFAobject <- prepare_mofa(MOFAobject,\n                           model_options = model_opts # input model options\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nChecking data options...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nNo data options specified, using default...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nNo training options specified, using default...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nChecking model options...\n```\n:::\n\n```{.r .cell-code}\nMOFAobject <- invisible(run_mofa(MOFAobject, use_basilisk = TRUE))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in run_mofa(MOFAobject, use_basilisk = TRUE): No output filename provided. Using /var/folders/hw/jx67_4vj6ljfd13xsg7xzvt83k7mrx/T//Rtmplep0xV/mofa_20231105-162058.hdf5 to store the trained model.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nConnecting to the mofapy2 package using basilisk. \n    Set 'use_basilisk' to FALSE if you prefer to manually set the python binary using 'reticulate'.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n        #########################################################\n        ###           __  __  ____  ______                    ### \n        ###          |  \\/  |/ __ \\|  ____/\\    _             ### \n        ###          | \\  / | |  | | |__ /  \\ _| |_           ### \n        ###          | |\\/| | |  | |  __/ /\\ \\_   _|          ###\n        ###          | |  | | |__| | | / ____ \\|_|            ###\n        ###          |_|  |_|\\____/|_|/_/    \\_\\              ###\n        ###                                                   ### \n        ######################################################### \n       \n \n        \nuse_float32 set to True: replacing float64 arrays by float32 arrays to speed up computations...\n\nSuccessfully loaded view='mirna' group='group1' with N=150 samples and D=184 features...\nSuccessfully loaded view='mrna' group='group1' with N=150 samples and D=200 features...\nSuccessfully loaded view='protein' group='group1' with N=150 samples and D=142 features...\n\n\nModel options:\n- Automatic Relevance Determination prior on the factors: False\n- Automatic Relevance Determination prior on the weights: True\n- Spike-and-slab prior on the factors: False\n- Spike-and-slab prior on the weights: False\nLikelihoods:\n- View 0 (mirna): gaussian\n- View 1 (mrna): gaussian\n- View 2 (protein): gaussian\n\n\n\n\n######################################\n## Training the model with seed 42 ##\n######################################\n\n\nELBO before training: -605349.12 \n\nIteration 1: time=0.02, ELBO=-97986.52, deltaELBO=507362.597 (83.81322127%), Factors=10\nIteration 2: time=0.02, Factors=10\nIteration 3: time=0.02, Factors=10\nIteration 4: time=0.02, Factors=10\nIteration 5: time=0.02, Factors=10\nIteration 6: time=0.02, ELBO=-85812.38, deltaELBO=12174.138 (2.01109376%), Factors=10\nIteration 7: time=0.02, Factors=10\nIteration 8: time=0.02, Factors=10\nIteration 9: time=0.02, Factors=10\nIteration 10: time=0.02, Factors=10\nIteration 11: time=0.02, ELBO=-85546.37, deltaELBO=266.018 (0.04394451%), Factors=10\nIteration 12: time=0.01, Factors=10\nIteration 13: time=0.02, Factors=10\nIteration 14: time=0.02, Factors=10\nIteration 15: time=0.02, Factors=10\nIteration 16: time=0.02, ELBO=-85119.84, deltaELBO=426.529 (0.07046008%), Factors=10\nIteration 17: time=0.02, Factors=10\nIteration 18: time=0.02, Factors=10\nIteration 19: time=0.02, Factors=10\nIteration 20: time=0.02, Factors=10\nIteration 21: time=0.02, ELBO=-84663.08, deltaELBO=456.760 (0.07545390%), Factors=10\nIteration 22: time=0.02, Factors=10\nIteration 23: time=0.02, Factors=10\nIteration 24: time=0.02, Factors=10\nIteration 25: time=0.02, Factors=10\nIteration 26: time=0.02, ELBO=-84469.18, deltaELBO=193.893 (0.03202997%), Factors=10\nIteration 27: time=0.02, Factors=10\nIteration 28: time=0.03, Factors=10\nIteration 29: time=0.02, Factors=10\nIteration 30: time=0.02, Factors=10\nIteration 31: time=0.03, ELBO=-84312.91, deltaELBO=156.279 (0.02581635%), Factors=10\nIteration 32: time=0.02, Factors=10\nIteration 33: time=0.02, Factors=10\nIteration 34: time=0.02, Factors=10\nIteration 35: time=0.02, Factors=10\nIteration 36: time=0.02, ELBO=-84211.61, deltaELBO=101.293 (0.01673301%), Factors=10\nIteration 37: time=0.01, Factors=10\nIteration 38: time=0.01, Factors=10\nIteration 39: time=0.01, Factors=10\nIteration 40: time=0.01, Factors=10\nIteration 41: time=0.01, ELBO=-84149.56, deltaELBO=62.055 (0.01025119%), Factors=10\nIteration 42: time=0.01, Factors=10\nIteration 43: time=0.01, Factors=10\nIteration 44: time=0.01, Factors=10\nIteration 45: time=0.01, Factors=10\nIteration 46: time=0.01, ELBO=-84113.44, deltaELBO=36.119 (0.00596669%), Factors=10\nIteration 47: time=0.01, Factors=10\nIteration 48: time=0.01, Factors=10\nIteration 49: time=0.01, Factors=10\nIteration 50: time=0.02, Factors=10\nIteration 51: time=0.02, ELBO=-84094.13, deltaELBO=19.310 (0.00318991%), Factors=10\nIteration 52: time=0.02, Factors=10\nIteration 53: time=0.02, Factors=10\nIteration 54: time=0.02, Factors=10\nIteration 55: time=0.02, Factors=10\nIteration 56: time=0.02, ELBO=-84083.06, deltaELBO=11.071 (0.00182882%), Factors=10\nIteration 57: time=0.02, Factors=10\nIteration 58: time=0.02, Factors=10\nIteration 59: time=0.02, Factors=10\nIteration 60: time=0.02, Factors=10\nIteration 61: time=0.02, ELBO=-84075.86, deltaELBO=7.195 (0.00118864%), Factors=10\nIteration 62: time=0.02, Factors=10\nIteration 63: time=0.02, Factors=10\nIteration 64: time=0.02, Factors=10\nIteration 65: time=0.02, Factors=10\nIteration 66: time=0.02, ELBO=-84070.67, deltaELBO=5.193 (0.00085787%), Factors=10\nIteration 67: time=0.02, Factors=10\nIteration 68: time=0.02, Factors=10\nIteration 69: time=0.02, Factors=10\nIteration 70: time=0.02, Factors=10\nIteration 71: time=0.02, ELBO=-84066.69, deltaELBO=3.977 (0.00065695%), Factors=10\nIteration 72: time=0.02, Factors=10\nIteration 73: time=0.01, Factors=10\nIteration 74: time=0.02, Factors=10\nIteration 75: time=0.02, Factors=10\nIteration 76: time=0.02, ELBO=-84063.53, deltaELBO=3.158 (0.00052174%), Factors=10\nIteration 77: time=0.02, Factors=10\nIteration 78: time=0.01, Factors=10\nIteration 79: time=0.01, Factors=10\nIteration 80: time=0.01, Factors=10\nIteration 81: time=0.01, ELBO=-84060.96, deltaELBO=2.577 (0.00042564%), Factors=10\nIteration 82: time=0.01, Factors=10\nIteration 83: time=0.01, Factors=10\nIteration 84: time=0.01, Factors=10\nIteration 85: time=0.01, Factors=10\nIteration 86: time=0.02, ELBO=-84058.84, deltaELBO=2.121 (0.00035040%), Factors=10\n\nConverged!\n\n\n\n#######################\n## Training finished ##\n#######################\n\n\nSaving model in /var/folders/hw/jx67_4vj6ljfd13xsg7xzvt83k7mrx/T//Rtmplep0xV/mofa_20231105-162058.hdf5...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in .quality_control(object, verbose = verbose): Factor(s) 4 are strongly correlated with the total number of expressed features for at least one of your omics. Such factors appear when there are differences in the total 'levels' between your samples, *sometimes* because of poor normalisation in the preprocessing steps.\n```\n:::\n:::\n\n\nNote that we get a message that a model was automatically save to .hdf5. It is also possible to specify the name and location of the file to save the model to, via `outfile` option under `runMofa()` function.\n\n## Variance decomposition\n\nThe most important insight that MOFA generates is the **variance decomposition analysis**. This plot shows the percentage of variance explained by each factor across each data modality.\n\n\n::: {.cell layout-align=\"center\" hash='mofa-light_cache/html/unnamed-chunk-13_fdcd125935b20ce14baac0657b1797a4'}\n\n```{.r .cell-code}\nplot_variance_explained(MOFAobject)\n```\n\n::: {.cell-output-display}\n![](mofa-light_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nFrom the results of the `plot_variance_explained` function in MOFA, we can discern the variance explained by each factor across the three views: mirna, mrna, and protein.\n\nIn the **mirna** view, Factor1 leads by explaining approximately 15.96% of the variance. Notably, Factor1 also stands out in both the **mrna** and **protein** views, explaining 20.37% and 20.41% respectively, suggesting its consistent importance across all views.\n\nFor the **mrna** view, besides Factor1, Factor2 contributes significantly with 11.88%. This contrasts with its contribution in the protein view, where it explains only 1.25% of the variance, and in the mirna view, where it accounts for 6.04%.\n\nIn the **protein** view, while Factor1 remains dominant, Factor3 emerges as significant, explaining 12.20% of the variance. This is intriguing as Factor3 has a minimal role in the mrna view (0.12%) but does have a presence in the mirna view with 0.65%.\n\nFactors such as Factor4 and Factor7 exhibit diverse roles across the views. In the mirna view, Factor4 explains a notable 12.77% but diminishes to 0.16% and 0.02% in the mrna and protein views respectively. Factor7, on the other hand, is more prominent in the mirna view with 7.09% but is almost negligible in the other two views.\n\nBtw. the variance explained estimates, corresponding to the above plot, are stored in the hdf5 file and loaded in model@cache[[\"variance_explained\"]]. They can be viewed via: \n\n::: {.cell hash='mofa-light_cache/html/unnamed-chunk-14_32cc827f421ca4b787146e0cf9d135a7'}\n\n```{.r .cell-code}\n# variance explained for every factor \nprint(MOFAobject@cache$variance_explained$r2_per_factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$group1\n               mirna        mrna     protein\nFactor1  15.95515609 20.36821842 20.41299939\nFactor2   6.04512691 11.88386679  1.25099421\nFactor3   0.64774156  0.12200475 12.20212579\nFactor4  12.77297139  0.16268492  0.02241731\nFactor5   3.50421071  5.50275445  1.06747746\nFactor6   3.08054090  3.41790318  2.97962427\nFactor7   7.09193349  0.05609989  0.02453923\nFactor8   1.25472546  4.96560931  0.72206855\nFactor9   0.01165271  0.11986494  6.47216439\nFactor10  2.66354084  2.11876631  0.31054020\n```\n:::\n:::\n\n\n**Which factor consistently plays a vital role across all the views?**\n\nIt is also important to see if the model fits the data well. We can do this by looking at how much of total variance is explained by factors across different views. Here, the results will usually vary based on the kind of data, number of samples and number of factors used.\n\n\n::: {.cell hash='mofa-light_cache/html/unnamed-chunk-15_79ef202ecf2de2a70fd015e6e91e0763'}\n\n```{.r .cell-code}\nvar_plot <- plot_variance_explained(MOFAobject, plot_total = T)[[2]]\nvar_plot\n```\n\n::: {.cell-output-display}\n![](mofa-light_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nIn this data set, by using 10 factors the MOFA model explains about 49% of the variation in the miRNA, 48% of the variation in the mRNA data and 45% of the variation in the protein data.\n\nThe matching variance values can be extracted via: \n\n::: {.cell hash='mofa-light_cache/html/unnamed-chunk-16_a7a6672cb3f01bb2a789baa57f6a56bb'}\n\n```{.r .cell-code}\nprint(MOFAobject@cache$variance_explained$r2_total)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$group1\n   mirna     mrna  protein \n49.21639 48.26142 44.95106 \n```\n:::\n:::\n\n\n## Downstream analysis\n\nWe now we have a reasonable model in which Factor1 consistently plays a vital role across all views. In the downstream analysis we can explore more factors, such as Factor1, and features weights. We can for instance aim to characterize Factor1 molecular signal and its association with available sample covariates.\n\n## Adding annotations\n\nWe can add samples annotations to the model now. We will add only our cancer subtypes, but could also include other covariates that my be relevant to the study, such as age or gender.\n\n::: {.cell hash='mofa-light_cache/html/unnamed-chunk-17_a8a4eefaedf1ab58bb689fc25ddeb040'}\n\n```{.r .cell-code}\n# add cancer subtype to the model\nsamples_metadata(MOFAobject) <- data.frame(sample=colnames(data_mofa$mirna),\n                                           subtype=breast.TCGA$data.train$subtype)\n```\n:::\n\n\n### Visualizing factors\n\nWe can visualize individual factor or factors combinations. We can also do that in connection to the sample groups. Let's look at few examples:\n\n\n::: {.cell layout-align=\"center\" hash='mofa-light_cache/html/unnamed-chunk-18_fdd5e0513c79c38c38a42c8415ac5695'}\n\n```{.r .cell-code}\n# visualize Factors 1, 2, 3\nmodel <- MOFAobject\nplot_factor(model, \n  factor = 1:3,\n  color_by = \"subtype\"\n)\n```\n\n::: {.cell-output-display}\n![Visualizaiton of individual Factors 1, 2 and 3, with cancer subtype grouping information.](mofa-light_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=672}\n:::\n:::\n\n::: {.cell layout-align=\"center\" hash='mofa-light_cache/html/unnamed-chunk-19_da1f2388d3ef80d76c27cb60ebf1c7e4'}\n\n```{.r .cell-code}\n# add violin plot\nmodel <- MOFAobject\nplot_factor(model, \n  factor = 1:3,\n  color_by = \"subtype\", \n  add_violin = T, \n  dodge = T\n  \n)\n```\n\n::: {.cell-output-display}\n![Visualizaiton of individual Factors 1, 2 and 3, with cancer subtype grouping information and with added violin plot.](mofa-light_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=672}\n:::\n:::\n\n::: {.cell layout-align=\"center\" hash='mofa-light_cache/html/unnamed-chunk-20_f6e0421efee47b2545edfe6567b88b54'}\n\n```{.r .cell-code}\n# visualize combination of Factors 1 and 2\nmodel <- MOFAobject\nplot_factors(model, \n  factors = 1:2,\n  color_by = \"subtype\"\n)\n```\n\n::: {.cell-output-display}\n![Visualizaiton of combinations of Factors 1 and 2, with cancer subtype grouping information.](mofa-light_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n### Association analysis\n\nTo understand the relation between Factors and sample metadata, we can further perform an association analysis.\n\n\n::: {.cell layout-align=\"center\" hash='mofa-light_cache/html/unnamed-chunk-21_ced30a9a9e9f26449a0faa478967836b'}\n\n```{.r .cell-code}\n# correlate factors with covariates\ncorrelate_factors_with_covariates(MOFAobject, \n  covariates = c(\"subtype\"), \n  plot = \"log_pval\",cluster_cols=F\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in correlate_factors_with_covariates(MOFAobject, covariates =\nc(\"subtype\"), : There are non-numeric values in the covariates data.frame,\nconverting to numeric...\n```\n:::\n\n::: {.cell-output-display}\n![](mofa-light_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nThe results clearly shows a strong association of Factor1 and cancer subtype. The remaining factors do not show a clear association with the cancer subtype. We could have also started from the association analysis to find out the factor that is associated with our grouping or other covariate of interest, and the focus on plotting the factors of interest.\n\n### Visualizing weights\n\nWe have a strong trend of subtypes captured by Factor 1. We can now look at the weights for this factor to figure out what are the most important features that contribute to this pattern.\n\nFeature weights play an important role in understanding the influence of each feature on a given factor. These weights offer a quantifiable score for every feature in relation to its respective factor. Essentially, when a feature doesn't correlate with a factor, its weight is anticipated to hover around zero. Conversely, features that are robustly associated with the factor will display large absolute weight values. The polarity of the weight whether positive or negative reveals the nature of the relationship: a positive weight suggests that the feature level elevates in instances with positive factor values and the opposite for negative weights.\n\nLet's look at the top 10 features in mRNA.\n\n::: {.cell layout-align=\"center\" hash='mofa-light_cache/html/unnamed-chunk-22_fffcf4e0cd7a37b75cfa66680eb09c68'}\n\n```{.r .cell-code}\nplot_top_weights(MOFAobject,view = \"mrna\",\n factor = 1,\n nfeatures = 10,    \n scale = T          \n)\n```\n\n::: {.cell-output-display}\n![](mofa-light_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nThe plot suggest that `STC2` has a strong *negative* relationship with Factor1. Looking back at the score plot, we see that our `Basal` subtype has ended up on the right of the plot, `Her2` in the middle and `LumA` on the left. This suggest that the expression of `STC2` is higher in `LumA` vs `Her2` and also `Her2` vs `LumA`. Let's check it:\n\n\n::: {.cell layout-align=\"center\" hash='mofa-light_cache/html/unnamed-chunk-23_f9484936706255925362a38211f32aa0'}\n\n```{.r .cell-code}\nplot_data_scatter(MOFAobject, \n  view = \"mrna\",\n  factor = 1, features = \"STC2\",color_by = \"subtype\"\n)\n```\n\n::: {.cell-output-display}\n![](mofa-light_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nGreat. But we have so many other features, do we have a subgroup of features in our data:\n\n\n::: {.cell layout-align=\"center\" hash='mofa-light_cache/html/unnamed-chunk-24_ce677adeaefffb008e1bcf251f7b0c71'}\n\n```{.r .cell-code}\n# plot heatmap\nsample_group <- samples_metadata(MOFAobject)\nrownames(sample_group) <- sample_group[,1]\n\nheatmap_plot <- plot_data_heatmap(MOFAobject, \nview = \"mrna\",\n  factor = 1, features = 50,\n  cluster_rows = TRUE, cluster_cols = FALSE,annotation_samples = sample_group[,\"subtype\",drop=F],\n  show_rownames = TRUE, show_colnames = FALSE,\n  scale = \"row\"\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n'annotation_samples' provided as a data.frame, please make sure that the rownames match the sample names\n```\n:::\n\n```{.r .cell-code}\nheatmap_plot\n```\n\n::: {.cell-output-display}\n![](mofa-light_files/figure-html/unnamed-chunk-24-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nWe can at least see two big groups of mRNAs having contrasting expression pattern. Let's extract these features and investigate them further.\n\n\n::: {.cell layout-align=\"center\" hash='mofa-light_cache/html/unnamed-chunk-25_cc9d68373c5db7a2e43db6e49696d79a'}\n\n```{.r .cell-code}\n# cut into features in two groups\nfeature_subgroups <- cutree(heatmap_plot$tree_row, 2)\n\n# plot first group of extracted features\nplot_data_scatter(MOFAobject, \n  view = \"mrna\",\n  factor = 1,  \n  features = names(feature_subgroups[feature_subgroups==1]),\n  color_by = \"subtype\",\n  dot_size = 1.5\n) \n```\n\n::: {.cell-output-display}\n![Scatter plot of features (mRNAs) in the first group of expression pattern agaist Factor 1 values](mofa-light_files/figure-html/unnamed-chunk-25-1.png){fig-align='center' width=1344}\n:::\n:::\n\n::: {.cell layout-align=\"center\" hash='mofa-light_cache/html/unnamed-chunk-26_5cff42fc49a068a9c8806fe74f5bb556'}\n\n```{.r .cell-code}\n# plot second group of extracted features\nplot_data_scatter(MOFAobject, \n  view = \"mrna\",\n  factor = 1,  \n  features = names(feature_subgroups[feature_subgroups==2]),\n  color_by = \"subtype\", \n  dot_size = 1.5\n) \n```\n\n::: {.cell-output-display}\n![Scatter plot of features (mRNAs) in the second group of expression pattern agaist Factor 1 values](mofa-light_files/figure-html/unnamed-chunk-26-1.png){fig-align='center' width=1344}\n:::\n:::\n\n\n\nAs it is clear the two subgroups are related to the features that are positively and negatively correlated with the first factor. This is a good indication that we can use the weights to group the features. We could use these groups to do enrichment analysis or similar, but this would be outside MOFA package. \n\n::: {#exr-mofa}\n### MOFA\n\nCan you perform MOFA on the test data which is in `breast.TCGA$data.test`?\n\n1.  Do you see the same pattern as in the training set?\n2.  Do the top 10 most important features overlap between training and testing?\n3.  How about the grouping of the features?\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}